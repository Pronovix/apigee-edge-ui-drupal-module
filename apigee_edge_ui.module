<?php

/**
 * @file
 * Main module file for Apigee Edge UI.
 */

declare(strict_types = 1);

/**
 * Copyright (C) 2019 PRONOVIX GROUP BVBA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Utility\TableSort;
use Drupal\apigee_edge_ui\BetterAppListBuilder;
use Drupal\apigee_edge_ui\BetterTeamAppListBuilder;
use Drupal\apigee_edge_ui\BetterTeamListBuilder;

/**
 * Implements hook_theme().
 */
function apigee_edge_ui_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'app_credential' => [
      'render element' => 'elements',
    ],
    'app_credential_product_list' => [
      'render element' => 'elements',
    ],
    'apigee_entity__app' => [
      'render element' => 'elements',
    ],
    'apigee_entity__team' => [
      'render element' => 'elements',
      'base hook' => 'apigee_entity',
    ],
    'apigee_edge_ui_list' => [
      'variables' => [
        'type' => '',
        'header' => NULL,
        'items' => NULL,
        'attributes' => [],
        'empty' => '',
        'show_collapse_link' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function apigee_edge_ui_entity_type_alter(array &$entity_types): void {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['developer_app'])) {
    $entity_types['developer_app']->setListBuilderClass(BetterAppListBuilder::class);
  }
  if (isset($entity_types['team_app'])) {
    $entity_types['team_app']->setListBuilderClass(BetterTeamAppListBuilder::class);
  }
  if (isset($entity_types['team'])) {
    $entity_types['team']->setListBuilderClass(BetterTeamListBuilder::class);
  }
}

/**
 * Prepares variables for apigee_edge_ui_list template.
 */
function template_preprocess_apigee_edge_ui_list(array &$variables): void {
  $variables['items_attributes'] = new Attribute(['class' => 'entity-list__items']);
  $variables['empty_attributes'] = new Attribute(['class' => 'entity-list__items--empty']);
  $variables['show_text'] = t('Show details');
  $variables['hide_text'] = t('Hide details');

  // Format the app list header based on template_preprocess_table().
  if (isset($variables['header'])) {
    $variables['header_attributes'] = new Attribute(['class' => 'entity-list__header']);
    $ts = TableSort::getContextFromRequest($variables['header'], \Drupal::request());

    foreach ($variables['header'] as $col_key => $cell) {
      if (!is_array($cell)) {
        $cell_content = $cell;
        $cell_attributes = new Attribute();
      }
      else {
        $cell_content = '';
        if (isset($cell['data'])) {
          $cell_content = $cell['data'];
          unset($cell['data']);
        }

        TableSort::header($cell_content, $cell, $variables['header'], $ts);

        // TableSort::header() removes the 'sort', 'initial_click_sort' and
        // 'field' keys.
        $cell_attributes = new Attribute($cell);
      }
      $variables['header'][$col_key] = [];
      $variables['header'][$col_key]['attributes'] = $cell_attributes;
      $variables['header'][$col_key]['content'] = $cell_content;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK() for apigee_edge_ui_list.
 */
function apigee_edge_theme_suggestions_apigee_edge_ui_list(array $variables): array {
  $suggestions = [];
  if (isset($variables['type'])) {
    $suggestions[] = 'apigee_edge_ui_list__' . $variables['type'];
  }

  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function apigee_edge_ui_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof EntityForm) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $entity_type = $form_object->getEntity()->getEntityTypeId();

    if (in_array($entity_type, ['team', 'team_app', 'developer_app'])) {
      $form['#attributes']['class'][] = 'apigee-edge-entity-form';
      $label = \Drupal::service('entity_type.manager')
        ->getDefinition($entity_type)
        ->getSingularLabel();

      if (isset($form['api_products'])) {
        $form['api_products']['#attributes']['class'][] = 'apigee-edge-entity-form__products';
      }

      if (isset($form['actions']['submit']) && empty($form['actions']['submit']['#value']->getArguments())) {
        $form['actions']['submit']['#value'] = t('@action @entity', [
          '@action' => $form['actions']['submit']['#value'],
          '@entity' => $label,
        ]);
      }

      if (isset($form['actions']['delete'])) {
        $form['actions']['delete']['#title'] = t('Delete @entity', ['@entity' => $label]);
        $form['actions']['delete']['#weight'] = 1;
      }

      if (isset($form['actions']['cancel'])) {
        $form['actions']['cancel']['#weight'] = $form['actions']['submit']['#weight'] - 1;
      }

      if ($entity_type !== 'team' && !$form_object->getEntity()->isNew() && isset($form['displayName'])) {
        // Add details wrapper to non-credential info fields.
        $form['details'] = [
          '#type' => 'fieldset',
          '#title' => t('Details'),
          '#tag' => 'div',
          '#attributes' => [
            'class' => [
              'apigee-edge-entity-form__details',
            ],
          ],
        ];

        $detail_fields = [
          'callbackUrl',
          'description',
          'displayName',
        ];

        foreach ($detail_fields as $field) {
          if (isset($form[$field])) {
            $form['details'][$field] = $form[$field];
            hide($form[$field]);
          }
        }
      }

      if (isset($form['credential'])) {
        foreach (Element::children($form['credential']) as $credential) {
          $form['credential'][$credential]['#attributes']['class'][] = 'apigee-edge-entity-form__credential';
          $form['credential'][$credential]['api_products']['#attributes']['class'][] = 'apigee-edge-entity-form__products';
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_app_credential_product_list().
 */
function apigee_edge_ui_preprocess_app_credential_product_list(array &$variables): void {
  $num_of_visible_rows = 5;
  if (count($variables['content']) <= $num_of_visible_rows) {
    return;
  }
  $variables['#attached']['library'][] = 'apigee_edge_ui/apigee_edge_ui.app_credential_product_list';
  $variables['num_of_visible_rows'] = $num_of_visible_rows;
  $variables['show_more_btn_attrs'] = new Attribute(['class' => []]);
  $variables['show_less_btn_attrs'] = new Attribute(['class' => []]);
}
